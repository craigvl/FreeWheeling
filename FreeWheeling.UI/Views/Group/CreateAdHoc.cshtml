@model FreeWheeling.UI.Models.AdHocCreateModel

@{
    ViewBag.Title = "Create Ad Hoc bunch";
}

<link href="~/Content/datepicker.css" rel="stylesheet" />
@Styles.Render("~/Content/jqueryui")
<p></p>
<div class="row">
    <div class="pull-left">
        @Html.ActionLink(" ", "Index", "Home", null, new {@style = "background-color: #FFF; color: #333333;", @class = "glyphicon glyphicon-chevron-left", onclick = "ShowProgress();" })
    </div>
</div>
<p></p>
<div class="row">
    <div class="btn-group btn-block col-xs-12 col-md-12 col-sm-12" style="margin-bottom:5px;width:100%;">
        <span class="btn btn-default btn-block"> Create a random bunch </span>
    </div>
    <p></p>
    @using (Html.BeginForm("CreateAdHoc", "Group", FormMethod.Post, new { @class = "form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div class="form-group">
            <label for="" class="col-sm-2 control-label">Location</label>
            <div class="col-sm-10 col-xs-10">
                <select class="form-control" data-bind="options: LocationChoices, optionsText: 'Name', optionsValue: 'id', selectedOptions: selectedLocation"></select>
            </div>
        </div>

        <div class="form-group">
            <label for="" class="col-sm-2 control-label">Bunch Name</label>
            <div data-bind="validationElement: Name" class="col-sm-10">
                @Html.TextBoxFor(model => model.Name, new { data_bind = "value:Name, uniqueName:true", @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-2 control-label">Date</label>
            <div class="col-md-10">
                <input type="text" class="form-control" data-bind="datepicker: DateString, datepickerOptions: { dataType: 'format', format: 'DD/MM/YYYY' }">
                @Html.ValidationMessageFor(model => model.DateString)
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2 control-label">Hour (24 Hour)</label>
            <div class="col-md-10">
                <div data-bind="validationElement: Hour">
                    @Html.TextBoxFor(model => model.Hour, new { data_bind = "value:Hour, uniqueName:true", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Hour)
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2 control-label">Minute</label>
            <div class="col-md-10">
                <div data-bind="validationElement: Minute">
                    @Html.TextBoxFor(model => model.Minute, new { data_bind = "value:Minute, uniqueName:true", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Minute)
                </div>
            </div>
        </div>



        <hr />

        <div class="form-group">
            <label for="" class="col-sm-2 control-label">Start Location</label>
            <div class="col-sm-10">
                <div data-bind="validationElement: StartLocation">
                    @Html.TextBoxFor(model => model.StartLocation, new { data_bind = "value:StartLocation, uniqueName:true", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.StartLocation)
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="" class="col-sm-2 control-label">Private</label>
            <div class="col-sm-10">
                @Html.CheckBoxFor(model => model.IsPrivate, new { data_bind = "checked:IsPrivate, uniqueName:true", @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <label for="" class="col-sm-2 control-label">Description</label>
            <div class="col-sm-10">
                <div>
                    @Html.TextAreaFor(model => model.Description, new { data_bind = "value:Description, uniqueName:true", @class = "form-control" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="" class="col-sm-2 control-label">Map (Enter <a target="_blank" href="http://veloroutes.org/bikemaps/">veloroutes</a> Route Number)</label>
            <div class="col-sm-10">
                <div>
                    @Html.TextBoxFor(model => model.MapUrl, new { data_bind = "value:MapUrl, uniqueName:true", @class = "form-control" })
                </div>
            </div>
        </div>

        <div id="templated">

            <div data-bind="template: { name: 'userRowTemplate', foreach: usersLines }">
            </div>

            <script type="text/html" id="userRowTemplate">
                <div class="form-group">
                    <label for="" class="col-sm-2 control-label">User Name</label>
                    <div class="col-sm-10">
                        <div>
                            <input class="form-control" id="InviteUser" data-bind="value: UserName, valueUpdate:'blur'" />
                        </div>
                    </div>
                </div>
            </script>


            <!-- when Add Gift is clicked, the method addGift() in the view model (viewModelForTemplated) object will be called -->
            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                    <button class="btn btn-default" data-bind="click: addUser">Invite a User/s</button>
                </div>
            </div>

            <!-- when Save is clicked, the method save() in the view model (viewModelForTemplated) object will be called. Simple eh? -->
            @* <button data-bind="click: save">Save</button>*@
        </div>
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <input class="btn btn-default" onclick="ShowProgress();" data-bind="click: save" id="btnSubmit" type="submit" value="Create" />
            </div>
        </div>
    }
 
</div>
@section Scripts {
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/knockout")
@Scripts.Render("~/bundles/knockoutvalidation")
@Scripts.Render("~/bundles/jqueryui")
<script src="~/Scripts/moment-datepicker.js"></script>
<script src="~/Scripts/moment-datepicker-ko.js"></script>

<script type="text/javascript">

    $('body').on('focus',"#InviteUser", function(){
        $(this).autocomplete({
            source: '@Url.Action("GetNames")'
        });
    })

      ko.validation.init({
        errorElementClass: 'has-error',
        errorMessageClass: 'help-block',
        decorateElement: true
    });


    var AdHocData;

    function UserModel() {

        var self = this;
        self.UserName = ko.observable();

    }

    var adhocModel = function () {
        var self = this;
        self.Name = ko.observable().extend({required:true});
        self.Hour = ko.observable().extend({ required: true, digit: true, min: 0, max: 24 });
        self.DateString = ko.observable().extend({ required: true });
        self.Minute = ko.observable().extend({ required: true, digit: true, min: 0, max: 60 });
        self.StartLocation = ko.observable().extend({ required: true });
        self.Description = ko.observable();
        self.MapUrl = ko.observable();
        self.IsPrivate = ko.observable();
        self.LocationChoices = ko.observable(@Html.Raw(Json.Encode(Model.Locations)));
        self.selectedLocation = ko.observable(@Html.Raw(Json.Encode(Model.LocationsId)));
        self.usersLines = ko.observableArray([]);

        self.addUser = function () {

            self.usersLines.push(new UserModel);

        };

        self.save = function () {

            //var UsersToSave = $.map(self.usersLines(), function (line) {
            //    return {                
            //    _UserToSave: line.UserName
            //    }
            //});

            //alert(JSON.stringify(ko.toJSON(UsersToSave)));

            AdHocData = {
                Name: self.Name,
                DateString: self.DateString,
                Hour: self.Hour,
                Minute: self.Minute,
                StartLocation: self.StartLocation,
                Description: self.Description,
                MapUrl: self.MapUrl,
                LocationsId: self.selectedLocation,
                InviteUsers: self.usersLines(),
                IsPrivate: self.IsPrivate()
            };

            //AdHocData.InviteUsers = UsersToSave;

            //alert(JSON.stringify(ko.toJSON(AdHocData)));

            var errors = ko.validation.group(AdHocData, { deep: true });

            errors.showAllMessages();

            if (errors().length > 0) {  
                // something went wrong - you should see the error messages
                displayMessageAjax("Errors! Please fix and try again.", "error", "BottomCentre", "tempoarayMessage");
                HideProgress();
                return;
            }

            //Ajax call to Insert the Ad Hoc Bunch
          

            $.ajax({
                type: "POST",
                url: '@Url.Action("CreateAdHoc", "Group")',
                data: ko.toJSON(AdHocData), //Convert the Observable Data into JSON
                contentType: "application/json",
                success: function (data, textStatus, jqXHR) {
                    var err = eval("(" + jqXHR.responseText + ")");
                    if (data.success == false) {
                        displayMessageAjax(err.Message, "error", "BottomCentre", "tempoarayMessage");
                        HideProgress();
                    }

                    if (data.success == true) {
                       // alert(ko.toJSON(self));
                        HideProgress();
                        window.location.href = '@Url.Action("AdHocList", "Ride")';
                     }
                },
                error: function () {
                    alert("Failed");
                }
            });
            //Ends Here
        };

    }
  
    $("form").submit(function () {
        if (!$(this).valid()) {
            HideProgress();
        }
        else {

        }
    });

    $(document).ready(function () {
        $('#InviteUser').autocomplete({
            source: '@Url.Action("GetNames")'
        });

        HideProgress();
        ko.applyBindingsWithValidation(adhocModel);

    })

</script>

}