@model FreeWheeling.UI.Models.AdHocCreateModel



@{
    ViewBag.Title = "Create Ad Hoc bunch";
}

<link href="~/Content/datepicker.css" rel="stylesheet" />


@Html.ActionLink("Back Home <---", "Index", "Home", null, new { @class = "btn btn-info" })

<h2>Create Ad Hoc bunch</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    
    <select data-bind="options: LocationChoices, optionsText: 'Name', optionsValue: 'id', selectedOptions: selectedLocation"></select>

        <p></p>
        <div><span class="RequiredField">*&nbsp;</span>bunch Name:</div>
    <div data-bind="validationElement: Name">
        @Html.TextBoxFor(model => model.Name, new {data_bind = "value:Name, uniqueName:true", @class = "form-control" })
    </div>

    <p></p>

        <div><span class="RequiredField">*&nbsp;</span>Date</div>
    <input readonly type="text" class="span2" data-bind="datepicker: DateString, datepickerOptions: { dataType: 'format', format: 'DD/MM/YYYY' }">
         @Html.ValidationMessageFor(model => model.DateString)
          <p></p>
        <div><span class="RequiredField">*&nbsp;</span>Hour (24 Hour)</div>
    <div data-bind="validationElement: Hour">
        @Html.TextBoxFor(model => model.Hour, new { data_bind = "value:Hour, uniqueName:true", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Hour)
    </div>
    <p></p>
        <div><span class="RequiredField">*&nbsp;</span>Minute</div>
    <div data-bind="validationElement: Minute">
        @Html.TextBoxFor(model => model.Minute, new { data_bind = "value:Minute, uniqueName:true", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Minute)
    </div>

        <hr />
    
        <div><span class="RequiredField">*&nbsp;</span>Start Location</div>

    <div data-bind="validationElement: StartLocation">
        @Html.TextBoxFor(model => model.StartLocation, new { data_bind = "value:StartLocation, uniqueName:true", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.StartLocation)
    </div>

    <div>Description</div>
        
        <div> 
            @Html.TextAreaFor(model => model.Description, new { data_bind = "value:Description, uniqueName:true", @class = "form-control" })
        </div>
    
    <div>Map (Enter <a target="_blank" href="http://veloroutes.org/bikemaps/">veloroutes</a> Route Number)</div>
        
        <div> 
            @Html.TextBoxFor(model => model.MapUrl, new { data_bind = "value:MapUrl, uniqueName:true", @class = "form-control" })
        </div>

    <p></p>
    
   <div id="templated">

<table >
    <tbody data-bind="template: { name: 'userRowTemplate', foreach: usersLines }"></tbody>
</table>
 
    <script type="text/html" id="userRowTemplate">
        <tr>
            <td>User name: <input data-bind="value: UserName" /></td>          
           @* <td><a href="#" data-bind="click: function() { viewModelForTemplated.removeGift($data) }">Delete</a></td>*@
        </tr>
    </script>
    
       <p></p>
    
    <!-- when Add Gift is clicked, the method addGift() in the view model (viewModelForTemplated) object will be called -->
       <button data-bind="click: addUser">Invite a User/s</button> 

    <!-- when Save is clicked, the method save() in the view model (viewModelForTemplated) object will be called. Simple eh? -->
   @* <button data-bind="click: save">Save</button>*@
</div>

         <div>
            <p></p>
             <input onclick="ShowProgress();" data-bind="click: save" id="btnSubmit" type="submit" value="Create Ad Hoc bunch" />
        </div>    
}

<div class="loading" align="center">
    Loading. Please wait.<br />
    <br />
    <img src="~/Content/Images/loader.gif" alt="" />
</div>

@section Scripts {
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/knockout")
@Scripts.Render("~/bundles/knockoutvalidation")
<script src="~/Scripts/moment-datepicker.js"></script>
<script src="~/Scripts/moment-datepicker-ko.js"></script>
<script type="text/javascript">

    ko.validation.init({
        errorElementClass: 'has-error',
        errorMessageClass: 'help-block',
        decorateElement: true
    });


    function UserModel() {

        var self = this;
        self.UserName = ko.observable();

    }

    var adhocModel = function () {
        var self = this;
        self.Name = ko.observable().extend({required:true});
        self.Hour = ko.observable().extend({ required: true, digit: true, min: 0, max: 24 });
        self.DateString = ko.observable().extend({ required: true });
        self.Minute = ko.observable().extend({ required: true, digit: true, min: 0, max: 60 });
        self.StartLocation = ko.observable().extend({ required: true });
        self.Description = ko.observable();
        self.MapUrl = ko.observable();
        self.LocationChoices = ko.observable(@Html.Raw(Json.Encode(Model.Locations)));
        self.selectedLocation = ko.observable(@Html.Raw(Json.Encode(Model.LocationsId)));
        self.usersLines = ko.observableArray([new UserModel]);

        self.addUser = function () {

            self.usersLines.push(new UserModel({UserName:""}));

        };

        self.save = function () {

            var UsersToSave = $.map(self.usersLines(), function (line) {
                return {
                    Name: line.UserName
                }
            });

            var AdHocData = {
                Name: self.Name,
                DateString: self.DateString,
                Hour: self.Hour,
                Minute: self.Minute,
                StartLocation: self.StartLocation,
                Description: self.Description,
                MapUrl: self.MapUrl,
                LocationsId: self.selectedLocation,
                InviteUsers: UsersToSave
            };

            var errors = ko.validation.group(AdHocData, { deep: true });

            errors.showAllMessages();

            if (errors().length > 0) {  
                // something went wrong - you should see the error messages
                alert("There are some errors. Please fix them and try save again.");
                HideProgress();
                return;
            }

            //Ajax call to Insert the Ad Hoc Bunch
            $.ajax({
                type: "POST",
                url: '@Url.Action("CreateAdHoc", "Group")',
                data: ko.toJSON(AdHocData), //Convert the Observable Data into JSON
                contentType: "application/json",
                success: function (data, textStatus, jqXHR) {
                    var err = eval("(" + jqXHR.responseText + ")");
                    if (data.success == false) {

                        alert(err.Message);
                        HideProgress();

                    }

                    if (data.success == true) {

                        HideProgress();
                        window.location.href = '@Url.Action("AddHocList", "Ride")'

                     }
                },
                error: function () {
                    alert("Failed");
                }
            });
            //Ends Here
        };

    }

    ko.applyBindingsWithValidation(adhocModel);
   
    $("form").submit(function () {
        if (!$(this).valid()) {
            HideProgress();
        }
        else {

        }
    });

    $(document).ready(function () {
        //console.log(adhocModel.isValid());
    });

</script>

}