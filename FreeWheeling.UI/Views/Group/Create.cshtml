@model FreeWheeling.UI.Models.GroupCreateModel

@{
    ViewBag.Title = "Create a bunch";
}

<style>
    #map-canvas {
        width:100%;
        height:200px;
    }

    #panel {       
    }
</style>

<script src="https://maps.googleapis.com/maps/api/js?v=3.exp"></script>

<script>
    var geocoder;
    var map;
    var marker;
    function initialize() {
        $.ajax({
            type: "GET",
            url: "http://private-d1ca0-bunchyapi.apiary-mock.com/bunch/location/frog",
            dataType: "json",
            success: function (data) {
                geocoder = new google.maps.Geocoder();
                var latlng = new google.maps.LatLng(data.lat, data.long);
                var mapOptions = {
                    zoom: 12,
                    center: latlng
                }
                map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

                marker = new google.maps.Marker({
                    position: latlng,
                    map: map,
                    draggable: true,
                    animation: google.maps.Animation.DROP
                });          
            },
            error: function (err) {
                console.log(err);
            }
        });           
    }

    function codeAddress() {
        var address = document.getElementById('StartLocation').value;
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);
                marker.setPosition(results[0].geometry.location);
                var lat = results[0].geometry.location.lat();
                var long = results[0].geometry.location.lng();
                $('.register-form__latitude-holder').val(lat);
                $('.register-form__longitude-holder').val(long);
                google.maps.event.addListener(marker, 'dragend', function (event) {
                    var lat = this.getPosition().lat();
                    var long = this.getPosition().lng();
                    $('.register-form__latitude-holder').val(lat);
                    $('.register-form__longitude-holder').val(long);
                });
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }
    google.maps.event.addDomListener(window, 'load', initialize);

</script>

<div class="row">
    <p>
        @Html.ActionLink(" ", "Index", "Home", null, new { @style = "background-color: #FFF; color: #333333;", @class = "glyphicon glyphicon-chevron-left", onclick = "ShowProgress();" })
    </p>
    <div class="btn-group btn-block">
        <span class="btn btn-default btn-block"> Create a new bunch </span>
    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <p></p>
        <div class="form-group">
            <div><span class="RequiredField control-label">*&nbsp;</span><b>Bunch Name:</b></div>
            <div>
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
            <div>
            </div>
            <p></p>
            <div><span class="RequiredField">*&nbsp;</span><b>Location:</b></div>
            @Html.DropDownListFor(
             x => x.LocationsId,
    new SelectList(
        Model.Locations.ToList().Select(
                     x => new { Value = x.id, Text = x.Name }
        ),
        "Value",
                 "Text", Model.LocationsId
    ), "-- Group Location --", new { @class = "form-control" }
)
            @Html.ValidationMessageFor(model => model.LocationsId)
            <p></p>
        </div>
        <div><b>Days Of Week</b></div>
        <p></p>
        <div>
            @for (int i = 0; i < Model.DaysOfWeek.Count; i++)
            {
                <div>
                    @Html.HiddenFor(x => x.DaysOfWeek[i].Name)
                    @Html.CheckBoxFor(x => x.DaysOfWeek[i].Checked)
                    @Html.LabelFor(x => x.DaysOfWeek[i].Checked, Model.DaysOfWeek[i].Name)
                </div>
            }
        </div>
        <hr />
        <div>
            <b>Private:</b>
            @Html.CheckBoxFor(f => f.IsPrivate)
            <p></p>
            <p><b>Note:</b> If this is a private group you will be able to invite users later.</p>
            <p>
                Only you as the bunch creator will be able to invite users.
            </p>
            <p>
                Only those users that you invite will be
                able to see this bunch.
            </p>
        </div>
        <p></p>
        <hr />
        <div><b>Time</b></div>
        <hr />
        <div><span class="RequiredField">*&nbsp;</span><b>Hour (24 Hour)</b></div>
        <div>
            @Html.TextBoxFor(model => model.Hour, new { id = "scroller", type = "number", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Hour)
        </div>
        <p></p>
        <div><span class="RequiredField">*&nbsp;</span><b>Minute</b></div>
        <div>
            @Html.TextBoxFor(model => model.Minute, new { type = "number", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Minute)
        </div>
        <p></p>
        <div><span class="RequiredField">*&nbsp;</span><b>Start Location</b></div>
        <div>
            @Html.TextBoxFor(model => model.StartLocation, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.StartLocation)
        </div>
        <p></p>
        <div><input class="btn btn-success" type="button" value="Lookup Address" onclick="codeAddress()"></div>
        <p></p>
        <div id="map-canvas"></div>
        @Html.HiddenFor(model => model.lat, new { @class = "register-form__latitude-holder" })
        @Html.HiddenFor(model => model.lng, new { @class = "register-form__longitude-holder" })
        <p></p>
        <div><span class="RequiredField">*&nbsp;</span><b>Your name</b></div>
        <div>
            @Html.TextBoxFor(model => model.CreatorName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CreatorName)
        </div>
        <p></p>
        <div><b>Description</b></div>
        <div>
            @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
        </div>
        <p></p>
        <div><b>Map</b> (<a style="color:#333333;text-decoration:underline" target="_blank" href="http://veloroutes.org/bikemaps/">veloroutes</a> number)</div>
        <div>
            @Html.TextBoxFor(model => model.MapUrl, new { @class = "form-control", type = "number" })
        </div>
        <div>
            <p></p>
            <input class="btn btn-default" onclick="ShowProgress();" id="btnSubmit" type="submit" value="Create" />
        </div>
        <p></p>
    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        jQuery(document).ready(function () {
            HideProgress();
        });
        $("form").submit(function () {
            if (!$(this).valid()) {
                HideProgress();
            }
            else {
            }
        });
    </script>
}