@model FreeWheeling.UI.Models.RideModelIndex
@using FreeWheeling.Domain.Entities
@using Microsoft.AspNet.Identity;

@{
    ViewBag.Title = "Index";
}

<script src="http://include.jaydata.org/jaydata.js"></script>

<p>
    <h2>
        @Model.Group.name
    </h2>
    @if (@Model.IsOwner)
    {
       
    }

</p>

@if (@Model.MapUrl != null)
{
    @Html.Raw(@Model.MapUrl)
}
<p></p>

@if (@Model.FromFavPage)
{

    @Html.ActionLink("Back <---", "Mybunches", "Group", null, new { @class = "btn btn-info", onclick = "ShowProgress();" })
    
   
}
else
{
@Html.ActionLink("Back <---", "Index", "Group", null, new { @class = "btn btn-info", onclick = "ShowProgress();" })
    
 
}

<hr />

<p>
    <h4>
    <span class="label label-primary">
     
       @Model.Ride.RideDate.ToLongDateString() @Html.Raw(",") @Model.Ride.RideDate.ToShortTimeString()
        </span>
        </h4>
    <hr />
    
    
        <h4><span class="label label-success">Keen (@Model.KeenCount.ToString())</span>
            <span id="ShowKeenFirstPlus" data-toggle="collapse" href="#collapseKeenFirst" class="label label-success">+</span>
            <span id="ShowKeenFirstMinus" data-toggle="collapse" href="#collapseKeenFirst" class="label label-success">-</span>
    
    </h4>
    <div id="collapseKeenFirst" class="panel-collapse collapse in">
        <div>
            @{

                foreach (Rider item in @Model.Riders)
                {
                    {
                        switch (item.PercentKeen)
                        {
                            case "OnWay":
                                <text>
<p><span class="label label-success">@item.Name is on the way! Left <abbr class="timeago" title="@item.LeaveTime.ToString("MM/dd/yyyy HH:mm:ss")">@item.LeaveTime.ToString("MM/dd/yyyy HH:mm:ss")</abbr></span></p>
                
            </text>
            break;  // Always break each case
        case "In":
            <text>
                <p><span class="label label-success">@item.Name is in!</span></p>
            </text>
            break;                   
    }
}  
            
       <p></p>       
    }
       
}
</div>
</div>
<hr />

<div>

    @if (@Model.Comments != null)
    {
    <h4><span class="label label-success">Comments (@Model.CommentCount)</span> 
    
        <span id="ShowCommentFirstPlus" data-toggle="collapse" href="#collapseCommentFirst" class="label label-success">+</span>
        <span id="ShowCommentFirstMinus" data-toggle="collapse" href="#collapseCommentFirst" class="label label-success">-</span>
    
    @Html.ActionLink("Add", "AddComment", "Ride", new { RideId = @Model.Ride.id, Groupid = @Model.Group.id , FromFavPage = @Model.FromFavPage }, new { @class = "btn btn-success", onclick = "ShowProgress();" })</h4>
         @:<div id="collapseCommentFirst" class="panel-collapse collapse in">
        foreach (Comment item in Model.Comments)
        {

        @*@item.Date.ToShortDateString() @Html.Raw(" ")  @item.Date.ToShortTimeString() @Html.Raw(" ")*@
        @item.userName <text>: </text>
        @item.CommentText
        @:<p></p>
        
    }
      
        @Html.ActionLink(string.Concat("See all Comments (", @Model.CommentCount, ")"), "SeeAllComments", "Ride", new { RideId = @Model.Ride.id, Groupid = @Model.Group.id, FromFavPage = @Model.FromFavPage }, new { @class = "btn btn-success", onclick = "ShowProgress();" })
                    
    }
</div>
</div>

<hr />

<h4><span class="label label-success">Actions</span></h4>

    <p></p>
    @Html.ActionLink("I'm In!", "Attend", "Ride", new { RideId = @Model.Ride.id, commitment = "In", Groupid = @Model.Group.id, FromFavPage = @Model.FromFavPage }, new { @class = "btn btn-primary", onclick = "ShowProgress();" })

    <p></p>
    @Html.ActionLink("I'm Out", "Attend", "Ride", new { RideId = @Model.Ride.id, Commitment = "Out", Groupid = @Model.Group.id, FromFavPage = @Model.FromFavPage }, new { @class = "btn btn-danger", onclick = "ShowProgress();" })

    <p></p>
    @Html.ActionLink("On My Way!", "Attend", "Ride", new { RideId = @Model.Ride.id, Commitment = "OnWay", Groupid = @Model.Group.id, FromFavPage = @Model.FromFavPage }, new { @class = "btn btn-success", onclick = "ShowProgress();" })
    
    <p></p>

<div class="loading" align="center">
    Loading. Please wait.<br />
    <br />
    <img src="~/Content/Images/loader.gif" alt="" />
</div>

@section scripts{
    @Scripts.Render("~/Scripts/jquery.timeago.js")

    <script>

        $data.Entity.extend("Section", {
            Id: { type: "int", key: true, computed: true },
            SectionName: { type: String, required: true, maxLength: 200 },
            Expanded: { type: Boolean }
        });

        $data.EntityContext.extend("SectionDatabase", {
            Sections: { type: $data.EntitySet, elementType: Section }
        });

        //$data.storageProviders.DbCreationType.DropAllExistingTables();

        var sectionDB = new SectionDatabase("MySectionDatase");

        //sectionDB.Sections.removeAll();

        sectionDB.onReady(function () {
            //sectionDB.Sections.removeAll();
        });


        jQuery(document).ready(function () {
            jQuery("abbr.timeago").timeago();

            jQuery("#ShowKeenFirstMinus").show();
            jQuery("#ShowKeenFirstPlus").hide();

            jQuery("#ShowCommentFirstMinus").show();
            jQuery("#ShowCommentFirstPlus").hide();


            jQuery('#collapseKeenFirst').on('hidden.bs.collapse', function () {
                jQuery("#ShowKeenFirstMinus").hide();
                jQuery("#ShowKeenFirstPlus").show();
                
                var KeenExpanded = new sectionDB.Sections.Section({ SectionName: 'KeenExpanded', Expanded: true });
                sectionDB.Sections.add(KeenExpanded);
                sectionDB.saveChanges();

                var KeenE = sectionDB.Sections.filter("it.SectionName.startsWith('KeenExpanded')")
                    .forEach(function (Section) {
                        jQuery.each(Section, function (index, val) {
                           // console.log(Section.Id);
                            //console.log('H1');
                        });
                    });



                var KeenEL = sectionDB.Sections.filter("it.SectionName.startsWith('KeenExpanded')").length;
                console.log(KeenEL)
                var KeenE1 = sectionDB.Sections.filter(function (Section) { return Section.SectionName == 'KeenExpanded' })
                                                       .toArray(function (Section) {
                                                         //  console.log(Section);
                                                       });


            //    $todo.context.beginTransaction(true, function (tran) {
            //        $todo.context.TodoEntries.filter("it.Value == this.txt", { txt: value }).toArray({
            //            success: function (items, innerTran) {
            //                if (items.length == 0) {
            //                    var entity = new $todo.Types.ToDoEntry({ Value: value, CreatedAt: now, ModifiedAt: now });
            //                    $todo.context.TodoEntries.add(entity);
            //                    $todo.context.saveChanges(tran)
            //                        .then(function (cnt, saveTran) { updateView(); })
            //                        .fail(function () { alert("Save error all!"); updateView(); });
            //                } else {
            //                    alert("Item is in the DB");
            //                    updateView();
            //                }
            //            },
            //            error: function () { console.log("General error"); }
            //        },
            //        tran);
            //    });
            //});

            })


            jQuery('#collapseKeenFirst').on('shown.bs.collapse', function () {
                jQuery("#ShowKeenFirstMinus").show();
                jQuery("#ShowKeenFirstPlus").hide();

            })

            jQuery('#collapseCommentFirst').on('hidden.bs.collapse', function () {
                jQuery("#ShowCommentFirstMinus").hide();
                jQuery("#ShowCommentFirstPlus").show();


            })


            jQuery('#collapseCommentFirst').on('shown.bs.collapse', function () {
                jQuery("#ShowCommentFirstMinus").show();
                jQuery("#ShowCommentFirstPlus").hide();

            })

           

        });

    </script>
}