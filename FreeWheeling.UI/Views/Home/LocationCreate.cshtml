@model FreeWheeling.UI.Models.LocationCreate

@{
    ViewBag.Title = "Location Create";
    var timeZoneList = TimeZoneInfo
        .GetSystemTimeZones()
        .Select(t => new SelectListItem
        {
            Text = t.DisplayName,
            Value = t.Id
        });
}

<style>
    #map-canvas {
        width: 100%;
        height: 200px;
    }

    #panel {
    }
</style>

<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places"></script>
<script>

    function initialize() {

        var mapOptions = {
            center: new google.maps.LatLng(-33.8688, 151.2195),
            zoom: 13
        };

        var map = new google.maps.Map(document.getElementById('map-canvas'),
    mapOptions);

        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        var input = document.getElementById('Name');
        var autocomplete = new google.maps.places.Autocomplete(input, { types: ['(cities)'], region: 'EU' });
        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                console.log('no location');
                return;
            }
            else
            {
                var lat = place.geometry.location.lat();
                var long = place.geometry.location.lng();
                $('.register-form__latitude-holder').val(lat);
                $('.register-form__longitude-holder').val(long);
                
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }
                marker.setIcon(/** @@type {google.maps.Icon} **/({
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);
                timeStamp = (Date.now() || new Date().getTime()) / 1000;
                timeZoneApiRequestUrl = "https://maps.googleapis.com/maps/api/timezone/json?location=" +
                            place.geometry.location.lat() + "," + place.geometry.location.lng() +
                            "&timestamp=" + timeStamp + "&key=AIzaSyCf2q3WNDcRRYqshDZ31lvpCOysgQBeOLg"

                $.get(timeZoneApiRequestUrl, function (data) {
                    var utcOffset = (data.rawOffset + data.dstOffset || 0) / 3600;

                    $('.register-form__Google_ErrorMessage-holder').val(data.error_message);
                    $('.register-form__GoogleStatus-holder').val(data.status);

                    $('.register-form__GoogletimeZoneName-holder').val(data.timeZoneName);
                    $('.register-form__GoogletzTimeZone-holder').val(data.timeZoneId);

                    $('.register-form__rawOffset-holder').val(data.rawOffset);
                    $('.register-form__dstOffset-holder').val(data.dstOffset);

                    $('.register-form__CurrentGoogleUTC-holder').val(utcOffset);

                }); // expand this to handle errors, just doing a get with success for now as a POC
            }
            console.log(place);
        });
    }

</script>
<div class="row">
    <p>
        @Html.ActionLink(" ", "Index", "Home", null, new { @style = "background-color: #FFF; color: #333333;", @class = "glyphicon glyphicon-chevron-left", onclick = "ShowProgress();" })
    </p>
    <div class="btn-group btn-block">
        <span class="btn btn-default btn-block"> Create a new location </span>
    </div>
    @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <p></p>
            @Html.ValidationSummary(true)
            <p></p>
            <div>
                @Html.HiddenFor(model => model.lat, new { @class = "register-form__latitude-holder" })
                @Html.HiddenFor(model => model.lng, new { @class = "register-form__longitude-holder" })

                @Html.HiddenFor(model => model.Google_ErrorMessage, new { @class = "register-form__Google_ErrorMessage-holder" })
                @Html.HiddenFor(model => model.GoogleStatus, new { @class = "register-form__GoogleStatus-holder" })

                @Html.HiddenFor(model => model.GoogletimeZoneName, new { @class = "register-form__GoogletimeZoneName-holder" })
                @Html.HiddenFor(model => model.GoogletzTimeZone, new { @class = "register-form__GoogletzTimeZone-holder" })

                @Html.HiddenFor(model => model.rawOffset, new { @class = "register-form__rawOffset-holder" })
                @Html.HiddenFor(model => model.dstOffset, new { @class = "register-form__dstOffset-holder" })

                @Html.HiddenFor(model => model.CurrentGoogleUTC, new { @class = "register-form__CurrentGoogleUTC-holder" })
            </div>
            <div><span class="RequiredField control-label">*&nbsp;</span><b>Location Name:</b></div>
            <div>
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        <p></p>
        <div id="map-canvas"></div>
        <p></p>
        @*<div><span class="RequiredField control-label">*&nbsp;</span><b>TimeZone for location</b></div>
        <div>
            @Html.DropDownListFor(m => m.TimeZoneId, timeZoneList, new { @class = "form-control" })
        </div>*@
            <p></p>
            <input class="btn btn-default" onclick="ShowProgress();" id="btnSubmit" type="submit" value="Create" />
        }
    </div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
    jQuery(document).ready(function () {
        HideProgress();
    });
    $("form").submit(function () {
        if (!$(this).valid()) {
            HideProgress();
        }
        else {
        }
    });

    google.maps.event.addDomListener(window, 'load', initialize);

</script>

}